# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# üíÅ The OpenShift Starter workflow will:
# - Checkout your repository
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift

env:
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ${{ secrets.OPENSHIFT_NAMESPACE }}

  APP_NAME: ministry-name-app
  APP_PORT: "8080"

  GITHUB_OWNER: bruce-wh-li

  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.TOKEN }}

  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: |
    ghcr.io/bruce-wh-li/ministry-name-app:latest
    ghcr.io/bruce-wh-li/ministry-name-app:${{ github.sha }}

on:
  workflow_dispatch:
  push:
    branches: ["master"]

jobs:
  # üñäÔ∏è EDIT if you want to run vulnerability check on your project before deploying
  # the application. Please uncomment the below CRDA scan job and configure to run it in
  # your workflow. For details about CRDA action visit https://github.com/redhat-actions/crda/blob/main/README.md
  #
  # TODO: Make sure to add 'CRDA Scan' starter workflow from the 'Actions' tab.
  # For guide on adding new starter workflow visit https://docs.github.com/en/github-ae@latest/actions/using-workflows/using-starter-workflows

  #crda-scan:
  #uses: ./.github/workflows/crda.yml
  #secrets:
  #CRDA_KEY: ${{ secrets.CRDA_KEY }}
  # SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}       # Either use SNYK_TOKEN or CRDA_KEY
  openshift-ci-cd:
    # üñäÔ∏è Uncomment this if you are using CRDA scan step above
    # needs: crda-scan
    name: Build and deploy to OpenShift
    runs-on: ubuntu-20.04
    #environment: production
    permissions:
      packages: write
    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v6
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ env.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ env.OPENSHIFT_TOKEN }}`,
            };

            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ env.IMAGE_REGISTRY_PASSWORD }}`;
            }

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`‚úîÔ∏è Secret "${name}" is set`);
              return false;
            });

            if (missingSecrets.length > 0) {
              core.setFailed(`‚ùå At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`‚úÖ All the required secrets are set`);
            }

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Determine app name
        if: env.APP_NAME == 'ministry-name-app'
        run: |
          echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

      - name: Determine image tags
        if: env.IMAGE_TAGS == 'ghcr.io/${{ github.repository_owner }}/minnameapp:latest'
        run: |
          echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

      - name: Build express app image
        run: |
          docker build -t ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:latest .
          docker tag ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:latest ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:${{ github.sha }}

      - name: GHCR login
        run: |
          docker login --username ${{ env.IMAGE_REGISTRY_USER }} --password ${{ env.IMAGE_REGISTRY_PASSWORD }} ghcr.io

      - name: Push To GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:latest
          IMAGE_SHA=${{ github.sha }}
          TAGS="ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:latest ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:${IMAGE_SHA}"
          for TAG in $TAGS; do
            echo "pushing $TAG"
            docker push $TAG
          done

      - name: Print image url
        run: echo "Image pushed as ${{ env.IMAGE_TAGS }}"

      #- name: Install oc
        #uses: redhat-actions/openshift-tools-installer@v1
        #with:
          #oc: 4

      # https://github.com/redhat-actions/oc-login#readme
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

      - name: Create and expose app
        id: deploy-and-expose
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ env.APP_NAME }}
          image: ghcr.io/${{ env.GITHUB_OWNER }}/ministry-name-app:latest
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
          port: ${{ env.APP_PORT }}
          #env: POSTGRES_HOST=postgresql POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} POSTGRES_DB=${{ secrets.POSTGRES_DB }}

      - name: Print application URL
        env:
          ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
          SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
        run: |
          [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
          echo
          echo "======================== Your application is available at: ========================"
          echo ${{ env.ROUTE }}
          echo "==================================================================================="
          echo
          echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
